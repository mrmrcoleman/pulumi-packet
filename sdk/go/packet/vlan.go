// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package packet

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to allow users to manage Virtual Networks in their projects.
// 
// To learn more about Layer 2 networking in Packet, refer to
// * https://support.packet.com/kb/articles/layer-2-configurations
// * https://support.packet.com/kb/articles/layer-2-overview
type Vlan struct {
	s *pulumi.ResourceState
}

// NewVlan registers a new resource with the given unique name, arguments, and options.
func NewVlan(ctx *pulumi.Context,
	name string, args *VlanArgs, opts ...pulumi.ResourceOpt) (*Vlan, error) {
	if args == nil || args.Facility == nil {
		return nil, errors.New("missing required argument 'Facility'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["facility"] = nil
		inputs["projectId"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["facility"] = args.Facility
		inputs["projectId"] = args.ProjectId
	}
	inputs["vxlan"] = nil
	s, err := ctx.RegisterResource("packet:index/vlan:Vlan", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Vlan{s: s}, nil
}

// GetVlan gets an existing Vlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlan(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VlanState, opts ...pulumi.ResourceOpt) (*Vlan, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["facility"] = state.Facility
		inputs["projectId"] = state.ProjectId
		inputs["vxlan"] = state.Vxlan
	}
	s, err := ctx.ReadResource("packet:index/vlan:Vlan", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Vlan{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Vlan) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Vlan) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Description string
func (r *Vlan) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Facility where to create the VLAN
func (r *Vlan) Facility() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["facility"])
}

// ID of parent project
func (r *Vlan) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// VXLAN segment ID
func (r *Vlan) Vxlan() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["vxlan"])
}

// Input properties used for looking up and filtering Vlan resources.
type VlanState struct {
	// Description string
	Description interface{}
	// Facility where to create the VLAN
	Facility interface{}
	// ID of parent project
	ProjectId interface{}
	// VXLAN segment ID
	Vxlan interface{}
}

// The set of arguments for constructing a Vlan resource.
type VlanArgs struct {
	// Description string
	Description interface{}
	// Facility where to create the VLAN
	Facility interface{}
	// ID of parent project
	ProjectId interface{}
}
