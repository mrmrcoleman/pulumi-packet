// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package packet

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides attachment of Packet Block Storage Volume to Devices.
// 
// Device and volume must be in the same location (facility).
// 
// Once attached by Terraform, they must then be mounted using the `packet_block_attach` and `packet_block_detach` scripts.
type VolumeAttachment struct {
	s *pulumi.ResourceState
}

// NewVolumeAttachment registers a new resource with the given unique name, arguments, and options.
func NewVolumeAttachment(ctx *pulumi.Context,
	name string, args *VolumeAttachmentArgs, opts ...pulumi.ResourceOpt) (*VolumeAttachment, error) {
	if args == nil || args.DeviceId == nil {
		return nil, errors.New("missing required argument 'DeviceId'")
	}
	if args == nil || args.VolumeId == nil {
		return nil, errors.New("missing required argument 'VolumeId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["deviceId"] = nil
		inputs["volumeId"] = nil
	} else {
		inputs["deviceId"] = args.DeviceId
		inputs["volumeId"] = args.VolumeId
	}
	s, err := ctx.RegisterResource("packet:index/volumeAttachment:VolumeAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeAttachment{s: s}, nil
}

// GetVolumeAttachment gets an existing VolumeAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeAttachmentState, opts ...pulumi.ResourceOpt) (*VolumeAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["deviceId"] = state.DeviceId
		inputs["volumeId"] = state.VolumeId
	}
	s, err := ctx.ReadResource("packet:index/volumeAttachment:VolumeAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VolumeAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VolumeAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the device to which the volume should be attached
func (r *VolumeAttachment) DeviceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deviceId"])
}

// The ID of the volume to attach
func (r *VolumeAttachment) VolumeId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeId"])
}

// Input properties used for looking up and filtering VolumeAttachment resources.
type VolumeAttachmentState struct {
	// The ID of the device to which the volume should be attached
	DeviceId interface{}
	// The ID of the volume to attach
	VolumeId interface{}
}

// The set of arguments for constructing a VolumeAttachment resource.
type VolumeAttachmentArgs struct {
	// The ID of the device to which the volume should be attached
	DeviceId interface{}
	// The ID of the volume to attach
	VolumeId interface{}
}
