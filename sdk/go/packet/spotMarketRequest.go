// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package packet

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Packet Spot Market Request resource to allow you to
// manage spot market requests on your account. https://support.packet.com/kb/articles/spot-market 
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-packet/blob/master/website/docs/r/spot_market_request.html.markdown.
type SpotMarketRequest struct {
	s *pulumi.ResourceState
}

// NewSpotMarketRequest registers a new resource with the given unique name, arguments, and options.
func NewSpotMarketRequest(ctx *pulumi.Context,
	name string, args *SpotMarketRequestArgs, opts ...pulumi.ResourceOpt) (*SpotMarketRequest, error) {
	if args == nil || args.DevicesMax == nil {
		return nil, errors.New("missing required argument 'DevicesMax'")
	}
	if args == nil || args.DevicesMin == nil {
		return nil, errors.New("missing required argument 'DevicesMin'")
	}
	if args == nil || args.Facilities == nil {
		return nil, errors.New("missing required argument 'Facilities'")
	}
	if args == nil || args.InstanceParameters == nil {
		return nil, errors.New("missing required argument 'InstanceParameters'")
	}
	if args == nil || args.MaxBidPrice == nil {
		return nil, errors.New("missing required argument 'MaxBidPrice'")
	}
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["devicesMax"] = nil
		inputs["devicesMin"] = nil
		inputs["facilities"] = nil
		inputs["instanceParameters"] = nil
		inputs["maxBidPrice"] = nil
		inputs["projectId"] = nil
		inputs["waitForDevices"] = nil
	} else {
		inputs["devicesMax"] = args.DevicesMax
		inputs["devicesMin"] = args.DevicesMin
		inputs["facilities"] = args.Facilities
		inputs["instanceParameters"] = args.InstanceParameters
		inputs["maxBidPrice"] = args.MaxBidPrice
		inputs["projectId"] = args.ProjectId
		inputs["waitForDevices"] = args.WaitForDevices
	}
	s, err := ctx.RegisterResource("packet:index/spotMarketRequest:SpotMarketRequest", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SpotMarketRequest{s: s}, nil
}

// GetSpotMarketRequest gets an existing SpotMarketRequest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpotMarketRequest(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SpotMarketRequestState, opts ...pulumi.ResourceOpt) (*SpotMarketRequest, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["devicesMax"] = state.DevicesMax
		inputs["devicesMin"] = state.DevicesMin
		inputs["facilities"] = state.Facilities
		inputs["instanceParameters"] = state.InstanceParameters
		inputs["maxBidPrice"] = state.MaxBidPrice
		inputs["projectId"] = state.ProjectId
		inputs["waitForDevices"] = state.WaitForDevices
	}
	s, err := ctx.ReadResource("packet:index/spotMarketRequest:SpotMarketRequest", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SpotMarketRequest{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SpotMarketRequest) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SpotMarketRequest) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Maximum number devices to be created
func (r *SpotMarketRequest) DevicesMax() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["devicesMax"])
}

// Miniumum number devices to be created
func (r *SpotMarketRequest) DevicesMin() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["devicesMin"])
}

// Facility IDs where devices should be created
func (r *SpotMarketRequest) Facilities() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["facilities"])
}

// Device parameters. See device resource for details
func (r *SpotMarketRequest) InstanceParameters() *pulumi.Output {
	return r.s.State["instanceParameters"]
}

// Maximum price user is willing to pay per hour per device
func (r *SpotMarketRequest) MaxBidPrice() *pulumi.Float64Output {
	return (*pulumi.Float64Output)(r.s.State["maxBidPrice"])
}

// Project ID
func (r *SpotMarketRequest) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// On resource creation - wait until all desired devices are active, on resource destruction - wait until devices are removed
func (r *SpotMarketRequest) WaitForDevices() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["waitForDevices"])
}

// Input properties used for looking up and filtering SpotMarketRequest resources.
type SpotMarketRequestState struct {
	// Maximum number devices to be created
	DevicesMax interface{}
	// Miniumum number devices to be created
	DevicesMin interface{}
	// Facility IDs where devices should be created
	Facilities interface{}
	// Device parameters. See device resource for details
	InstanceParameters interface{}
	// Maximum price user is willing to pay per hour per device
	MaxBidPrice interface{}
	// Project ID
	ProjectId interface{}
	// On resource creation - wait until all desired devices are active, on resource destruction - wait until devices are removed
	WaitForDevices interface{}
}

// The set of arguments for constructing a SpotMarketRequest resource.
type SpotMarketRequestArgs struct {
	// Maximum number devices to be created
	DevicesMax interface{}
	// Miniumum number devices to be created
	DevicesMin interface{}
	// Facility IDs where devices should be created
	Facilities interface{}
	// Device parameters. See device resource for details
	InstanceParameters interface{}
	// Maximum price user is willing to pay per hour per device
	MaxBidPrice interface{}
	// Project ID
	ProjectId interface{}
	// On resource creation - wait until all desired devices are active, on resource destruction - wait until devices are removed
	WaitForDevices interface{}
}
