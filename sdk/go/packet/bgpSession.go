// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package packet

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource to manage BGP sessions in Packet Host. Refer to [Packet BGP documentation](https://support.packet.com/kb/articles/bgp) for more details.
// 
// You need to have BGP config enabled in your project.
// 
// BGP session must be linked to a device running [BIRD](https://bird.network.cz) or other BGP routing daemon which will control route advertisements via the session to Packet's upstream routers. 
type BgpSession struct {
	s *pulumi.ResourceState
}

// NewBgpSession registers a new resource with the given unique name, arguments, and options.
func NewBgpSession(ctx *pulumi.Context,
	name string, args *BgpSessionArgs, opts ...pulumi.ResourceOpt) (*BgpSession, error) {
	if args == nil || args.AddressFamily == nil {
		return nil, errors.New("missing required argument 'AddressFamily'")
	}
	if args == nil || args.DeviceId == nil {
		return nil, errors.New("missing required argument 'DeviceId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["addressFamily"] = nil
		inputs["defaultRoute"] = nil
		inputs["deviceId"] = nil
	} else {
		inputs["addressFamily"] = args.AddressFamily
		inputs["defaultRoute"] = args.DefaultRoute
		inputs["deviceId"] = args.DeviceId
	}
	inputs["status"] = nil
	s, err := ctx.RegisterResource("packet:index/bgpSession:BgpSession", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BgpSession{s: s}, nil
}

// GetBgpSession gets an existing BgpSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgpSession(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BgpSessionState, opts ...pulumi.ResourceOpt) (*BgpSession, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["addressFamily"] = state.AddressFamily
		inputs["defaultRoute"] = state.DefaultRoute
		inputs["deviceId"] = state.DeviceId
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("packet:index/bgpSession:BgpSession", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BgpSession{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BgpSession) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BgpSession) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// `ipv4` or `ipv6`
func (r *BgpSession) AddressFamily() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["addressFamily"])
}

// Boolean flag to set the default route policy. False by default.
func (r *BgpSession) DefaultRoute() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["defaultRoute"])
}

// ID of device 
func (r *BgpSession) DeviceId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deviceId"])
}

func (r *BgpSession) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// Input properties used for looking up and filtering BgpSession resources.
type BgpSessionState struct {
	// `ipv4` or `ipv6`
	AddressFamily interface{}
	// Boolean flag to set the default route policy. False by default.
	DefaultRoute interface{}
	// ID of device 
	DeviceId interface{}
	Status interface{}
}

// The set of arguments for constructing a BgpSession resource.
type BgpSessionArgs struct {
	// `ipv4` or `ipv6`
	AddressFamily interface{}
	// Boolean flag to set the default route policy. False by default.
	DefaultRoute interface{}
	// ID of device 
	DeviceId interface{}
}
