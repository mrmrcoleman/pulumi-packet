// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package packet

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Packet device datasource.
// 
// > **Note:** All arguments including the `rootPassword` and `userData` will be stored in
//  the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-packet/blob/master/website/docs/d/device.html.markdown.
func LookupDevice(ctx *pulumi.Context, args *GetDeviceArgs) (*GetDeviceResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["deviceId"] = args.DeviceId
		inputs["hostname"] = args.Hostname
		inputs["projectId"] = args.ProjectId
	}
	outputs, err := ctx.Invoke("packet:index/getDevice:getDevice", inputs)
	if err != nil {
		return nil, err
	}
	return &GetDeviceResult{
		AccessPrivateIpv4: outputs["accessPrivateIpv4"],
		AccessPublicIpv4: outputs["accessPublicIpv4"],
		AccessPublicIpv6: outputs["accessPublicIpv6"],
		AlwaysPxe: outputs["alwaysPxe"],
		BillingCycle: outputs["billingCycle"],
		Description: outputs["description"],
		DeviceId: outputs["deviceId"],
		Facility: outputs["facility"],
		HardwareReservationId: outputs["hardwareReservationId"],
		Hostname: outputs["hostname"],
		IpxeScriptUrl: outputs["ipxeScriptUrl"],
		Networks: outputs["networks"],
		NetworkType: outputs["networkType"],
		OperatingSystem: outputs["operatingSystem"],
		Plan: outputs["plan"],
		Ports: outputs["ports"],
		ProjectId: outputs["projectId"],
		PublicIpv4SubnetSize: outputs["publicIpv4SubnetSize"],
		RootPassword: outputs["rootPassword"],
		SshKeyIds: outputs["sshKeyIds"],
		State: outputs["state"],
		Storage: outputs["storage"],
		Tags: outputs["tags"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getDevice.
type GetDeviceArgs struct {
	// Device ID
	DeviceId interface{}
	// The device name
	Hostname interface{}
	// The id of the project in which the devices exists
	ProjectId interface{}
}

// A collection of values returned by getDevice.
type GetDeviceResult struct {
	// The ipv4 private IP assigned to the device
	AccessPrivateIpv4 interface{}
	// The ipv4 management IP assigned to the device
	AccessPublicIpv4 interface{}
	// The ipv6 management IP assigned to the device
	AccessPublicIpv6 interface{}
	AlwaysPxe interface{}
	// The billing cycle of the device (monthly or hourly)
	BillingCycle interface{}
	// Description string for the device
	Description interface{}
	DeviceId interface{}
	// The facility where the device is deployed.
	Facility interface{}
	// The id of hardware reservation which this device occupies
	HardwareReservationId interface{}
	Hostname interface{}
	IpxeScriptUrl interface{}
	// The device's private and public IP (v4 and v6) network details. When a device is run without any special network configuration, it will have 3 networks: 
	// * Public IPv4 at `packet_device.name.network.0`
	// * IPv6 at `packet_device.name.network.1`
	// * Private IPv4 at `packet_device.name.network.2`
	// Elastic addresses then stack by type - an assigned public IPv4 will go after the management public IPv4 (to index 1), and will then shift the indices of the IPv6 and private IPv4. Assigned private IPv4 will go after the management private IPv4 (to the end of the network list).
	// The fields of the network attributes are:
	Networks interface{}
	// L2 network type of the device, one of "layer3", "layer2-bonded", "layer2-individual", "hybrid"
	NetworkType interface{}
	// The operating system running on the device
	OperatingSystem interface{}
	// The hardware config of the device
	Plan interface{}
	// Ports assigned to the device
	Ports interface{}
	ProjectId interface{}
	PublicIpv4SubnetSize interface{}
	// Root password to the server (if still available)
	RootPassword interface{}
	// List of IDs of SSH keys deployed in the device, can be both user or project SSH keys
	SshKeyIds interface{}
	// The state of the device
	State interface{}
	Storage interface{}
	// Tags attached to the device
	Tags interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
